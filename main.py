import os, asyncio

from dotenv import load_dotenv

from langgraph.store.memory import InMemoryStore

from agents.cra import initialize_agent
from agents.utils import stream_graph_updates

from utils import _set_env, authenticate_tableau_user


async def main():
    """
    TABLEAU AGENT STAGING PLATFORM

    Stage individual LangGraph Agents and Tableau AI tools to test functionality such as:
        - Metrics (canonical source of truth for metrics, includes machine learning insights generated by Tableau Pulse)
        - Workbooks (contains analytics such as dashboards and charts that server as canonical interfaces for data exploration)
        - Data Sources (describes sources of data available for querying and exploration)
        - Headless BI (can query a data source for on-demand data sets including aggregations, filters and calculations)
        - Web Search (can incorporate external knowledge from the web)

    Execute behavior within different agentic architectures
    """
    # environment variables available to current process and sub processes
    load_dotenv()

    # checks for values in .env, else prompts user before initializing
    _set_env('OPENAI_API_KEY')
    _set_env('TABLEAU_DOMAIN')
    _set_env('TABLEAU_SITE')
    _set_env('DATASOURCE_LUID')
    _set_env('TAVILY_API_KEY')
    _set_env('PINECONE_API_KEY')
    _set_env('PINECONE_ENVIRONMENT')
    _set_env('PINECONE_INDEX_NAME')
    _set_env('RETRIEVER_MODEL')

    domain = os.environ['TABLEAU_DOMAIN']
    site = os.environ['TABLEAU_SITE']
    datasource_luid = os.environ['DATASOURCE_LUID']

    tableau_session = await authenticate_tableau_user(
        jwt_client_id=os.environ['TABLEAU_JWT_CLIENT_ID'],
        jwt_secret_id=os.environ['TABLEAU_JWT_SECRET_ID'],
        jwt_secret=os.environ['TABLEAU_JWT_SECRET'],
        tableau_api=os.environ['TABLEAU_API'],
        tableau_user=os.environ['TABLEAU_USER'],
        tableau_domain=domain,
        tableau_site=site,
    )

    credentials = {
        "session": tableau_session,
        "url": domain,
        "site": site,
        "datasource_luid": datasource_luid
    }

    # initialize a memory store
    tableau_store = InMemoryStore()
    # inserting user credentials
    tableau_store.put('user_data', "credentials", {
        "credentials": credentials
    })
    # inserting a datasource for VDS querying
    tableau_store.put('user_data', "analytics", {
        "datasource_luid": datasource_luid
    })
    # inserting personalized vector stores
    tableau_store.put('user_data', "vectors", {
        "metrics": {
            "index": None,
            "description": ""
        },
        "workbooks": {
            "index": None,
            "description": ""
        },
        "datasources": {
            "index": None,
            "description": ""
        },
        "tableau_kb": {
            "index": None,
            "description": ""
        },
        "agent_kb": {
            "index": None,
            "description": ""
        },
    })

    # initialize one of the repo's custom agents
    agent = initialize_agent(tableau_store)

    print("\nWelcome to the Tableau Agent Staging Environment!")
    print("Enter a prompt or type 'exit' to end \n")

    # User input loop
    while True:
        try:
            user_input = input("User: \n")
            if user_input.lower() in ["quit", "exit", "q", "stop", "end"]:
                print("Exiting Tableau Agent Staging Environment...")
                print("Goodbye!")
                break

            message = {
                "user_message": user_input,
                "tableau_credentials": credentials
            }

            stream_graph_updates(message, agent)

        except:
            # fallback if input() is not available
            user_input = "average discount, total sales and profits by region sorted by profit"
            print("Default user input: " + user_input)
            stream_graph_updates(message, agent)
            break

if __name__ == "__main__":
    asyncio.run(main())
